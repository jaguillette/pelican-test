<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pelican Test</title><link href="https://jaguillette.github.io/pelican-test/" rel="alternate"></link><link href="https://jaguillette.github.io/pelican-test/feeds/all.atom.xml" rel="self"></link><id>https://jaguillette.github.io/pelican-test/</id><updated>2022-01-05T00:00:00-05:00</updated><subtitle>Hello world!</subtitle><entry><title>Some theming</title><link href="https://jaguillette.github.io/pelican-test/some-theming.html" rel="alternate"></link><published>2022-01-05T00:00:00-05:00</published><updated>2022-01-05T00:00:00-05:00</updated><author><name>Jeremy Guillette</name></author><id>tag:jaguillette.github.io,2022-01-05:/pelican-test/some-theming.html</id><summary type="html">&lt;p&gt;So the next step is to make the site look like something different. I decided to go with the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/backdrop"&gt;Backdrop&lt;/a&gt; theme, which is compiled into the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican themes repository&lt;/a&gt;. I kind of wanted to go with something more self-contained, but I like the look of this one and wanted to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So the next step is to make the site look like something different. I decided to go with the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/backdrop"&gt;Backdrop&lt;/a&gt; theme, which is compiled into the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican themes repository&lt;/a&gt;. I kind of wanted to go with something more self-contained, but I like the look of this one and wanted to see how to get something less polished to work (this one was made by a grad student for his personal site, but he was nice enough to share).&lt;/p&gt;
&lt;p&gt;I set up a themes repository in my own home folder, per the recommendations of the pelican docs. That set up the whole themes repository on its own, outside of the site folder. That makes me nervous, as it makes things less self-contained, and my &lt;code&gt;pelicanconf.py&lt;/code&gt; file now contains an absolute file path that only works on my machine. If I were using this more seriously, I think I'd use the &lt;code&gt;os&lt;/code&gt; library to expand &lt;code&gt;~&lt;/code&gt; and set a path to the theme more dynamically. It would also be a nice idea to move the whole theme repo into this folder.&lt;/p&gt;
&lt;p&gt;I did run into some difficulties in setting up. At first the site wouldn't generate, compalining that a pagination variable in a template somewhere wasn't defined. I was able to find a fix in &lt;a href="https://github.com/getpelican/pelican-themes/issues/386"&gt;this github issue&lt;/a&gt;, which I was even able to add to. The thing that I learned that was really valuable was running &lt;code&gt;pelican -v -D content&lt;/code&gt; when things are going wrong to better be able to get to the bottom of them. That pointed me to the problem templates, which helped me construct a better pelicanconf setting that doesn't use a deprecated property.&lt;/p&gt;
&lt;p&gt;The background image was also pretty easy to set up. I put a new image in the newly-created "images" folder in content that my &lt;code&gt;pelican content&lt;/code&gt; command had been complaining about not being able to find, and setting the background image parameter worked well with a relative link.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>First steps</title><link href="https://jaguillette.github.io/pelican-test/first-steps.html" rel="alternate"></link><published>2022-01-04T00:00:00-05:00</published><updated>2022-01-04T00:00:00-05:00</updated><author><name>Jeremy Guillette</name></author><id>tag:jaguillette.github.io,2022-01-04:/pelican-test/first-steps.html</id><summary type="html">&lt;p&gt;Since this is a blog generator, might as well test it with documenting the process of setting it up. I'm set up in a fresh python virtual environment, and so far I've installed the following packages as they've come up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican
markdown
ghp-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I set up this repository with &lt;code&gt;pelican-quickstart …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since this is a blog generator, might as well test it with documenting the process of setting it up. I'm set up in a fresh python virtual environment, and so far I've installed the following packages as they've come up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican
markdown
ghp-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I set up this repository with &lt;code&gt;pelican-quickstart&lt;/code&gt;, and since I knew I wanted to use github pages, I set up my repository as well, so I could set the base url to &lt;code&gt;https://jaguillette.github.io/pelican-test&lt;/code&gt; from the jump. I also configured the automation to be set up for deploying to github pages, just following the prompts.&lt;/p&gt;
&lt;p&gt;The first time I ran &lt;code&gt;pelican content&lt;/code&gt; to generate the site, it failed and said it couldn't find any files it recognized, but didn't list markdown as something it was looking for, so I ran &lt;code&gt;pip install markdown&lt;/code&gt;. After that &lt;code&gt;pelican content&lt;/code&gt; and &lt;code&gt;pelican --listen&lt;/code&gt; were both happy to run.&lt;/p&gt;
&lt;p&gt;I took a look at the &lt;code&gt;Makefile&lt;/code&gt; to see what kinds of options I have. I saw &lt;code&gt;make publish&lt;/code&gt;, but that looks like it'll just generate with production settings. &lt;code&gt;make github&lt;/code&gt; looked like the ticket, but at first it complained because I didn't have &lt;code&gt;ghp-import&lt;/code&gt; (GitHub pages import). Then it complained because I forgot to initialize the repo. I did that and added the remote origin, then ran &lt;code&gt;make github&lt;/code&gt; again. That pushed a &lt;code&gt;gh-pages&lt;/code&gt; branch to the repo, which happened to be the first branch. That just has the site content. I set up my &lt;code&gt;.gitignore&lt;/code&gt;, then pushed the main code to &lt;code&gt;main&lt;/code&gt;, which I had to make the default branch since &lt;code&gt;gh-pages&lt;/code&gt; was there first. The repo was already set up to deploy though, and looks to work.&lt;/p&gt;</content><category term="misc"></category></entry></feed>